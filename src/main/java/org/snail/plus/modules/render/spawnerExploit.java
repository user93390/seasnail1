package org.snail.plus.modules.render;

import meteordevelopment.meteorclient.events.render.Render3DEvent;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.renderer.ShapeMode;
import meteordevelopment.meteorclient.settings.ColorSetting;
import meteordevelopment.meteorclient.settings.Setting;
import meteordevelopment.meteorclient.settings.SettingGroup;
import meteordevelopment.meteorclient.settings.SoundEventListSetting;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.Utils;
import meteordevelopment.meteorclient.utils.render.color.SettingColor;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.block.entity.MobSpawnerBlockEntity;
import net.minecraft.block.spawner.MobSpawnerLogic;
import net.minecraft.sound.SoundEvent;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.world.chunk.WorldChunk;
import org.snail.plus.Addon;
import org.snail.plus.utilities.WorldUtils;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class spawnerExploit extends Module {
    private final SettingGroup sgGeneral = settings.getDefaultGroup();

    private final Setting<List<SoundEvent>> sounds = sgGeneral.add(new SoundEventListSetting.Builder()
            .name("sounds")
            .description("The sounds to play when a spawner is found. ONLY ONE SOUND WILL BE PLAYED.")
            .build());

    private final Setting<SettingColor> sideColor = sgGeneral.add(new ColorSetting.Builder()
            .name("side color")
            .description("Side color")
            .defaultValue(new SettingColor(0, 255, 255, 100))
            .build());

    private final Setting<SettingColor> lineColor = sgGeneral.add(new ColorSetting.Builder()
            .name("line color")
            .description("Line color")
            .defaultValue(new SettingColor(0, 255, 255, 255))
            .build());

    List<BlockPos> spawnPos = new ArrayList<>();
    boolean sent;
    int dist = 0;

    public spawnerExploit() {
        super(Addon.Snail, "spawner-exploit", "shows you what spawners may actually be shop stashes");
    }

    @Override
    public void onActivate() {
        spawnPos = new ArrayList<>();
        sent = false;
    }

    @Override
    public void onDeactivate() {
        spawnPos = new ArrayList<>();
        sent = false;
    }

    @EventHandler
    private void onTick(TickEvent.Post event) {
        ChunkPos pos = new ChunkPos(mc.player.getBlockPos());
        if (mc.getNetworkHandler() != null) {
            dist = Utils.getRenderDistance();
        }

        for (int chunkX = pos.x - dist; chunkX < pos.x + dist; chunkX++) {
            for (int chunkZ = pos.z - dist; chunkZ < pos.z + dist; chunkZ++) {
                WorldChunk chunk = mc.world.getChunk(chunkX, chunkZ);
                for (BlockEntity blockEntity : chunk.getBlockEntities().values()) {
                    if (blockEntity.getType() == BlockEntityType.MOB_SPAWNER) {
                        MobSpawnerBlockEntity spawner = (MobSpawnerBlockEntity) blockEntity;
                        try {
                            Field spawnDelayField = MobSpawnerLogic.class.getDeclaredField("spawnDelay");
                            spawnDelayField.setAccessible(true);
                            int spawnDelay = spawnDelayField.getInt(spawner.getLogic());
                            if (spawnDelay != 20) {
                                spawnPos.add(blockEntity.getPos());
                                spawnPos = new ArrayList<>(new HashSet<>(spawnPos));
                                remover(spawnPos).run();

                                for (BlockPos blockPos : spawnPos) {
                                    if (!sent) {
                                        warning("Possible spawner stash at: " + blockPos.getX() + " " + blockPos.getY() + " " + blockPos.getZ());
                                        if (!sounds.get().isEmpty()) {
                                            WorldUtils.playSound(sounds.get().getFirst(), 1);
                                        }
                                        sent = true;
                                    }
                                }
                            }
                        } catch (NoSuchFieldException | IllegalAccessException e) {
                            Addon.LOG.error("Failed to access MobSpawnerLogic fields");
                        }
                    }
                }
            }
        }
    }

    public Runnable remover(List<BlockPos> pos) {
        return () -> pos.removeIf(blockPos -> mc.world.getBlockState(blockPos).isAir()
                || !mc.player.getBlockPos().isWithinDistance(blockPos, dist * 16));
    }

    @EventHandler
    private void onRender(Render3DEvent event) {
        spawnPos.forEach(pos -> event.renderer.box(pos, sideColor.get(), lineColor.get(), ShapeMode.Both, 0));
    }

    @Override
    public String getInfoString() {
        return String.valueOf(spawnPos.size());
    }
}